### Hello World
# 1. print "Hello World"
print("Hello World")

# 2. print "Hello Noelle!" with the name in a variable
name = "Noelle"
print( "Hello", name ,"!" ) # with a comma
print( "Hello " + name + "!")   # with a +

#3. print "Hello 42!" with the number in a variable
name = 42
print( "Hello", name , "!") # with a comma
print( "Hello" + name + "!")    # with a +  -- this one should give us an error!

#4.print "I love to eat sushi and pizza." with the foods in variables
fave_food1 = "sushi"
fave_food2 = "pizza"
print( "I love to eat {} and {}" .format(fave_food1, fave_food2)) # with .format()
print( f"I love to eat {fave_food1} and {fave_food2}" ) # with an f string

### Basic For Loops I

#1. Basic - Print all integers from 0 to 150. Hint:use a for loop and range
for i in range(0, 151):
    print(i)
    
# OR
count = 0
while count <=150:
 print (count)
 count+=1

#2. Multiples of Five - Print all the multiples of 5 from 5 to 1,000
print(*range(5, 1001, 5))

#3. Counting, the Dojo Way - Print integers 1 to 100. If divisible by 5, print "Coding" instead. If divisible by 10, print "Coding Dojo".
1
 i = 1
 while i <=100:
     if i%10 == 0:
         print("Coding Dojo")
         i+=1
     elif i%5 == 0:
         print("Coding")
         i+=1
     else:
         print(i)
         i+=1
         
#4. Whoa. That Sucker's Huge - Add odd integers from 0 to 500,000, and print the final sum.
sum = 0
for count in range (0,500000):
    sum+=count
print(sum)

#5. Countdown by Fours - Print positive numbers starting at 2018, counting down by fours.
countdown = 2018
while countdown > 0:
    print ('CountDown = ', countdown)
    countdown = countdown - 4  
    
#6. Flexible Counter (optional) - Set three variables: lowNum, highNum, mult. Starting at lowNum and going through highNum, print only the integers that are a multiple of mult. For example, if lowNum=2, highNum=9, and mult=3, the loop should print 3, 6, 9 (on successive lines)
def flexible_counter(lowNum, highNum, mult):
     i = lowNum
     while i <= highNum:
         if i%mult == 0:
             print(i, '' , end= '')
             i+=1
         else:
             i+=1


### Basic For Loops II
#1. Biggie Size - Given a list, write a function that changes all positive numbers in the list to "big". 
#Example: biggie_size([-1, 3, 5, -5]) returns that same list, but whose values are now [-1, "big", "big", -5]
def biggie_size(list):
     for i in range(0,len(list)):
         if list[i] > 0:
             list[i]="big"
     return list 
    
biggie_size([-1,3,5,-5])


#2. Count Positives - Given a list of numbers, create a function to replace the last value with the number of positive values. 
(Note that zero is not considered to be a positive number).
Example: count_positives([-1,1,1,1]) changes the original list to [-1,1,1,3] and returns it 
Example: count_positives([1,6,-4,-2,-7,-2]) changes the list to [1,6,-4,-2,-7,2] and returns it

def count_positives(list):
    count = 0
    for i in list:
        if i > 0:
            count += 1
    list[len(list)-1] = count
    return list
   
print(count_positives([-1,1,1,1]))
print(count_positives([1,6,-4,-2,-7,-2]))


#3. Sum Total - Create a function that takes a list and returns the sum of all the values in the array. Example: sum_total([1,2,3,4]) should return 10 Example: sum_total([6,3,-2]) should return 7
def sum_total(list):
    sum = 0
    for i in list:
        sum += i
    return sum
print("Sum Total:" , sum_total([1,2,3,4]))
print("Sum Total:" , sum_total([6,3,-2]))


#4. Average - Create a function that takes a list and returns the average of all the values. Example: average([1,2,3,4]) should return 2.5
def average(list):
    sum = 0
    for i in list:
        sum += i
    return (sum/len(list))
print("Average:" ,average([1,2,3,4]))


#5. Length - Create a function that takes a list and returns the length of the list. 
Example: length([37,2,1,-9]) should return 4 Example: length([]) should return 0
def length(list):
    return len(list)
print("Length:" ,length([37,2,1,-9]))
print("Length:" ,length([]))


#6. Minimum - Create a function that takes a list of numbers and returns the minimum value in the list. 
(Optional) If the list is empty, have the function return False. 
Example: minimum([37,2,1,-9]) should return -9 
(Optional) Example: minimum([]) should return False
def minimum(list):
    min = list[0]        
    for i in list:
        if i<min:
            min = i
    if len(list)<0:
        return False
    return min
print("Minimum:", minimum([37,2,1,-9]))


#7. Maximum - Create a function that takes a list and returns the maximum value in the array. (Optional) If the list is empty, have the function return False. Example: maximum([37,2,1,-9]) should return 37 (Optional) Example: maximum([]) should return False
def maximum(list):
    max = list[0]        
    for i in list:
        if i>max:
            max = i
    if len(list)<0:
        return False
    return max
print("Maximum:", maximum([37,2,1,-9]))


#8. Ultimate Analysis (Optional) - Create a function that takes a list and returns a dictionary that has the sumTotal, average, minimum, maximum and length of the list. Example: ultimate_analysis([37,2,1,-9]) should return {'sumTotal': 31, 'average': 7.75, 'minimum': -9, 'maximum': 37, 'length': 4 }
def ultimate_analysis(list):
    dictonary = {'sumTotal': 0, 
                 'average': 0, 
                 'minimum': 0, 
                 'maximun': 0, 
                 'length': len(list)}
    for i in list:
        if dictonary['minimum']>i:
            dictonary['minimum'] = i
        if dictonary['maximun']<i:
            dictonary['maximun'] = i
        dictonary['sumTotal']+= i
        dictonary['average']=dictonary['sumTotal']/len(list)
    return dictonary
print(ultimate_analysis([37,2,1,-9]))


#9. Reverse List (Optional) - Create a function that takes a list and return that list with values reversed. Do this without creating a second list. (This challenge is known to appear during basic technical interviews.) Example: reverse_list([37,2,1,-9]) should return [-9,1,2,37]

reverse_list = [37,2,1,-9]
print('Original List:', reverse_list)
reverse_list.reverse() # List Reverse
print('Reversed List:', reverse_list)


# OR
def reverse_list(list):
    for i in range(0, (len(list)-1)//2):
        temp = list[i]
        list[i] = list[len(list)-1-i]
        list[len(list)-1-i] = temp
    return list
print('Reversed List:', reverse_list([37,2,1,-9]))


